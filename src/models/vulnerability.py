from typing import Optional, List, Union, Dict, Any
from datetime import datetime
from .base import BaseModel

class Vulnerability(BaseModel):
    """Modelo para vulnerabilidades"""

    def __init__(
        self,
        stix_id: str,
        name: str,
        description: Optional[str] = None,
        cve_id: Optional[str] = None,
        cvss_score: Optional[float] = None,
        cvss_vector: Optional[str] = None,
        severity: Optional[str] = None,
        affected_products: Optional[List[str]] = None,
        published_date: Optional[datetime] = None,
        patched: bool = False,
        references: Optional[List[str]] = None
    ):
        super().__init__(stix_id, name, description)
        self.cve_id = cve_id
        self.cvss_score = cvss_score
        self.cvss_vector = cvss_vector
        self.severity = severity
        self.affected_products = affected_products or []
        self.published_date = published_date or datetime.utcnow()
        self.patched = patched
        self.references = references or []

    def to_dict(self) -> Dict[str, Any]:
        """Convertir la vulnerabilidad a diccionario"""
        base_dict = super().to_dict()
        base_dict.update({
            'cve_id': self.cve_id,
            'cvss_score': self.cvss_score,
            'cvss_vector': self.cvss_vector,
            'severity': self.severity,
            'affected_products': self.affected_products,
            'published_date': self.published_date,
            'patched': self.patched,
            'references': self.references
        })
        return base_dict

    @property
    def risk_level(self) -> str:
        """Calcular el nivel de riesgo basado en el CVSS"""
        if self.cvss_score is None:
            return "Unknown"
        if self.cvss_score >= 9.0:
            return "Critical"
        elif self.cvss_score >= 7.0:
            return "High"
        elif self.cvss_score >= 4.0:
            return "Medium"
        else:
            return "Low"

    def is_critical(self) -> bool:
        """Verificar si la vulnerabilidad es crítica"""
        return self.risk_level == "Critical"

    def days_since_published(self) -> Optional[int]:
        """Calcular días desde la publicación"""
        if self.published_date:
            return (datetime.utcnow() - self.published_date).days
        return None

    @staticmethod
    def parse_cvss_vector(vector: str) -> Dict[str, str]:
        """Parsear vector CVSS a diccionario"""
        if not vector:
            return {}
        
        parts = vector.strip('CVSS:3.1/').split('/')
        metrics = {}
        
        for part in parts:
            if ':' in part:
                key, value = part.split(':')
                metrics[key] = value
                
        return metrics